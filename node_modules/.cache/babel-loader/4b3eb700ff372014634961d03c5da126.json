{"ast":null,"code":"import \"antd/es/list/style\";\nimport _List from \"antd/es/list\";\nimport _slicedToArray from \"C:\\\\Users\\\\PIONEER\\\\Documents\\\\projects\\\\srabonti-sample-react-java\\\\srabonti-sample-ui\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport \"antd/es/card/style\";\nimport _Card from \"antd/es/card\";\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\Users\\\\PIONEER\\\\Documents\\\\projects\\\\srabonti-sample-react-java\\\\srabonti-sample-ui\\\\src\\\\components\\\\private\\\\Playlist\\\\Playlists.js\";\n\nimport * as React from 'react';\nimport { useEffect, useContext, useState } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport * as gfunctions from '../../../utility/generalFunctions';\nimport { KeyOutlined, UserOutlined, TeamOutlined } from '@ant-design/icons';\nimport { withRouter } from \"react-router\";\nimport UserContext from './../../../context/UserContext';\nimport useApi from '../../../hooks/useApi';\nimport * as PortalConstants from \"../../../utility/constants\"; //updateStatus\n\nvar Playlists = function Playlists(props) {\n  var user = useContext(UserContext);\n  var Meta = _Card.Meta;\n  var location = useLocation();\n\n  var _useState = useState(true),\n      _useState2 = _slicedToArray(_useState, 2),\n      loading = _useState2[0],\n      setLoading = _useState2[1];\n\n  var _useApi = useApi(\"playlists/users/\" + user.id, null, PortalConstants.APIMETHODS.GET),\n      _useApi2 = _slicedToArray(_useApi, 2),\n      playlistsFetchResponse = _useApi2[0],\n      playlistsFetchRequest = _useApi2[1];\n\n  var _useState3 = useState(null),\n      _useState4 = _slicedToArray(_useState3, 2),\n      playlistData = _useState4[0],\n      setPlaylistData = _useState4[1];\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      showError = _useState6[0],\n      setShowError = _useState6[1];\n\n  useEffect(function () {\n    if (playlistData === null) {\n      playlistsFetchRequest.request(null, PortalConstants.APIMETHODS.GET);\n    }\n  });\n  useEffect(function () {\n    setLoading(false);\n\n    if (playlistsFetchResponse.data && !playlistsFetchResponse.error && !playlistsFetchResponse.isLoading) {\n      setPlaylistData(playlistsFetchResponse.data);\n    } else if (authenticateResponse.error && !authenticateResponse.data && !authenticateResponse.isLoading) {\n      setShowError(true);\n    }\n  }, [playlistsFetchResponse]);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Spin, {\n    spinning: loading,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(_List, {\n    grid: {\n      gutter: 16,\n      column: 4\n    },\n    dataSource: pla,\n    renderItem: function renderItem(item) {\n      return /*#__PURE__*/React.createElement(_List.Item, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(_Card, {\n        title: item.title,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 17\n        }\n      }, \"Card content\"));\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 13\n    }\n  })));\n};\n\nexport default withRouter(Playlists);","map":{"version":3,"sources":["C:/Users/PIONEER/Documents/projects/srabonti-sample-react-java/srabonti-sample-ui/src/components/private/Playlist/Playlists.js"],"names":["React","useEffect","useContext","useState","useLocation","gfunctions","KeyOutlined","UserOutlined","TeamOutlined","withRouter","UserContext","useApi","PortalConstants","Playlists","props","user","Meta","location","loading","setLoading","id","APIMETHODS","GET","playlistsFetchResponse","playlistsFetchRequest","playlistData","setPlaylistData","showError","setShowError","request","data","error","isLoading","authenticateResponse","gutter","column","pla","item","title"],"mappings":";;;;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,SAAT,EAAoBC,UAApB,EAAgCC,QAAhC,QAAgD,OAAhD;AACA,SAASC,WAAT,QAA4B,kBAA5B;AAEA,OAAO,KAAKC,UAAZ,MAA4B,mCAA5B;AACA,SAASC,WAAT,EAAsBC,YAAtB,EAAoCC,YAApC,QAAwD,mBAAxD;AACA,SAASC,UAAT,QAA2B,cAA3B;AACA,OAAOC,WAAP,MAAwB,gCAAxB;AACA,OAAOC,MAAP,MAAmB,uBAAnB;AACA,OAAO,KAAKC,eAAZ,MAAiC,4BAAjC,C,CAEA;;AACA,IAAMC,SAAS,GAAG,SAAZA,SAAY,CAACC,KAAD,EAAW;AAEzB,MAAMC,IAAI,GAAGb,UAAU,CAACQ,WAAD,CAAvB;AACA,MAAMM,IAAI,GAAG,MAAKA,IAAlB;AACA,MAAMC,QAAQ,GAAGb,WAAW,EAA5B;;AAJyB,kBAKKD,QAAQ,CAAC,IAAD,CALb;AAAA;AAAA,MAKlBe,OALkB;AAAA,MAKTC,UALS;;AAAA,gBAMgCR,MAAM,CAAC,qBAAmBI,IAAI,CAACK,EAAzB,EAA6B,IAA7B,EAAkCR,eAAe,CAACS,UAAhB,CAA2BC,GAA7D,CANtC;AAAA;AAAA,MAMjBC,sBANiB;AAAA,MAMOC,qBANP;;AAAA,mBAOerB,QAAQ,CAAC,IAAD,CAPvB;AAAA;AAAA,MAOlBsB,YAPkB;AAAA,MAOHC,eAPG;;AAAA,mBAQSvB,QAAQ,CAAC,KAAD,CARjB;AAAA;AAAA,MAQlBwB,SARkB;AAAA,MAQPC,YARO;;AASzB3B,EAAAA,SAAS,CAAC,YAAM;AACZ,QAAGwB,YAAY,KAAK,IAApB,EAAyB;AACrBD,MAAAA,qBAAqB,CAACK,OAAtB,CAA8B,IAA9B,EAAmCjB,eAAe,CAACS,UAAhB,CAA2BC,GAA9D;AACH;AACJ,GAJQ,CAAT;AAMArB,EAAAA,SAAS,CAAC,YAAM;AACZkB,IAAAA,UAAU,CAAC,KAAD,CAAV;;AACA,QAAGI,sBAAsB,CAACO,IAAvB,IAA+B,CAACP,sBAAsB,CAACQ,KAAvD,IAAgE,CAACR,sBAAsB,CAACS,SAA3F,EAAqG;AACnGN,MAAAA,eAAe,CAACH,sBAAsB,CAACO,IAAxB,CAAf;AACD,KAFD,MAGK,IAAGG,oBAAoB,CAACF,KAArB,IAA8B,CAACE,oBAAoB,CAACH,IAApD,IAA4D,CAACG,oBAAoB,CAACD,SAArF,EAA+F;AAClGJ,MAAAA,YAAY,CAAC,IAAD,CAAZ;AACD;AACF,GARM,EAQJ,CAACL,sBAAD,CARI,CAAT;AAWA,sBACI,uDACA,oBAAC,IAAD;AAAM,IAAA,QAAQ,EAAEL,OAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AACA,IAAA,IAAI,EAAE;AAAEgB,MAAAA,MAAM,EAAE,EAAV;AAAcC,MAAAA,MAAM,EAAE;AAAtB,KADN;AAEA,IAAA,UAAU,EAAEC,GAFZ;AAGA,IAAA,UAAU,EAAE,oBAAAC,IAAI;AAAA,0BAChB,0BAAM,IAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI;AAAM,QAAA,KAAK,EAAEA,IAAI,CAACC,KAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBADJ,CADgB;AAAA,KAHhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CADA,CADJ;AAeH,CAzCD;;AA0CA,eAAe7B,UAAU,CAACI,SAAD,CAAzB","sourcesContent":["import * as React from 'react';\r\nimport { useEffect, useContext, useState } from 'react';\r\nimport { useLocation } from 'react-router-dom';\r\nimport { Row, List, Card } from 'antd';\r\nimport * as gfunctions from '../../../utility/generalFunctions';\r\nimport { KeyOutlined, UserOutlined, TeamOutlined } from '@ant-design/icons';\r\nimport { withRouter } from \"react-router\"; \r\nimport UserContext from './../../../context/UserContext'; \r\nimport useApi from '../../../hooks/useApi'; \r\nimport * as PortalConstants from \"../../../utility/constants\"; \r\n\r\n//updateStatus\r\nconst Playlists = (props) => {\r\n\r\n    const user = useContext(UserContext);\r\n    const Meta = Card.Meta;\r\n    const location = useLocation();\r\n    const [loading, setLoading] = useState(true);\r\n    const  [playlistsFetchResponse, playlistsFetchRequest] = useApi(\"playlists/users/\"+user.id, null,PortalConstants.APIMETHODS.GET);\r\n    const [playlistData , setPlaylistData] =useState(null);\r\n    const [showError, setShowError] = useState(false);\r\n    useEffect(() => {\r\n        if(playlistData === null){\r\n            playlistsFetchRequest.request(null,PortalConstants.APIMETHODS.GET);\r\n        }\r\n    });\r\n\r\n    useEffect(() => {\r\n        setLoading(false);\r\n        if(playlistsFetchResponse.data && !playlistsFetchResponse.error && !playlistsFetchResponse.isLoading){\r\n          setPlaylistData(playlistsFetchResponse.data);\r\n        }\r\n        else if(authenticateResponse.error && !authenticateResponse.data && !authenticateResponse.isLoading){\r\n          setShowError(true);\r\n        }\r\n      }, [playlistsFetchResponse]);\r\n     \r\n\r\n    return (\r\n        <>\r\n        <Spin spinning={loading}>\r\n            <List\r\n            grid={{ gutter: 16, column: 4 }}\r\n            dataSource={pla}\r\n            renderItem={item => (\r\n            <List.Item>\r\n                <Card title={item.title}>Card content</Card>\r\n            </List.Item>\r\n            )}/>\r\n         </Spin>\r\n        </>\r\n\r\n    );\r\n}\r\nexport default withRouter(Playlists);"]},"metadata":{},"sourceType":"module"}