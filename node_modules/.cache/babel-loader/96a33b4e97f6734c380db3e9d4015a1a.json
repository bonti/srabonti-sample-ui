{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Users\\\\PIONEER\\\\Documents\\\\projects\\\\srabonti-sample-react-java\\\\srabonti-sample-ui\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\PIONEER\\\\Documents\\\\projects\\\\srabonti-sample-react-java\\\\srabonti-sample-ui\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"C:\\\\Users\\\\PIONEER\\\\Documents\\\\projects\\\\srabonti-sample-react-java\\\\srabonti-sample-ui\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport _objectSpread from \"C:\\\\Users\\\\PIONEER\\\\Documents\\\\projects\\\\srabonti-sample-react-java\\\\srabonti-sample-ui\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nimport { useState, useReducer, useCallback } from \"react\";\nimport { useCookies } from 'react-cookie';\nimport apiConfigInfo from '../api/apiConfig';\nimport { isNullOrUndefined } from \"util\";\nimport { replaceNull, deleteKeysFromObject } from '../utility/generalFunctions';\nimport * as PortalConstants from \"../utility/constants\";\n\nrequire('isomorphic-fetch');\n\nvar SUCCESS_CODE = 200; // const UNAUTHORIZED = 400;\n// const SERVER_FAILURE = 500;\n\nvar dataFetchReducer = function dataFetchReducer(state, action) {\n  switch (action.type) {\n    case \"FETCH_INIT\":\n      return _objectSpread(_objectSpread({}, state), {}, {\n        isLoading: true,\n        isError: false\n      });\n\n    case \"FETCH_SUCCESS\":\n      var data = [];\n\n      if (!isNullOrUndefined(action.payload.result.responseData)) {\n        data = action.payload.result.responseData;\n      }\n\n      var result = action.payload.status === SUCCESS_CODE ? _objectSpread(_objectSpread({}, state), {}, {\n        data: data,\n        error: null,\n        hasError: false,\n        isLoading: false,\n        success: true\n      }) : _objectSpread(_objectSpread({}, state), {}, {\n        data: null,\n        error: action.payload.result.responseStatus ? action.payload.result.responseStatus : {\n          errorMessage: [{\n            key: \"generic.error\",\n            message: \"Server is down\"\n          }],\n          \"httpStatusCode\": 500,\n          \"statusDesc\": \"ServerFailure\"\n        },\n        hasError: true,\n        isLoading: false\n      });\n      return result;\n\n    case \"FETCH_FAILURE\":\n      return _objectSpread(_objectSpread({}, state), {}, {\n        data: null,\n        error: action.payload.responseStatus ? action.payload.responseStatus : {\n          errorMessage: [{\n            key: \"generic.error\",\n            message: \"Server is down\"\n          }],\n          \"httpStatusCode\": 500,\n          \"statusDesc\": \"ServerFailure\"\n        },\n        hasError: true,\n        isLoading: false\n      });\n\n    default:\n      return null;\n  }\n};\n\nfunction getDataApiOptions(method, requestBody, authorization) {\n  var options = {\n    method: method,\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json',\n      'Authorization': 'Bearer ' + authorization\n    }\n  };\n\n  if (!isNullOrUndefined(requestBody)) {\n    options.body = JSON.stringify(requestBody);\n  }\n\n  return options;\n}\n\nvar useApi = function useApi(apiPath, body, method) {\n  var _useCookies = useCookies(),\n      _useCookies2 = _slicedToArray(_useCookies, 1),\n      cookie = _useCookies2[0];\n\n  var options = getDataApiOptions(method, body, cookie[PortalConstants.AUTH_TOKEN]);\n\n  var _useState = useState(apiConfigInfo.url + apiPath),\n      _useState2 = _slicedToArray(_useState, 1),\n      url = _useState2[0];\n\n  var _useReducer = useReducer(dataFetchReducer, {\n    isLoading: null,\n    hasError: false,\n    errorMessage: \"\",\n    data: null,\n    request: body\n  }),\n      _useReducer2 = _slicedToArray(_useReducer, 2),\n      state = _useReducer2[0],\n      dispatch = _useReducer2[1];\n\n  var callApi = useCallback( /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(body, method, newAPIPath) {\n      var APIUrl, didCancel, fetchRequest, response, status, result;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              APIUrl = url;\n\n              if (newAPIPath) {\n                APIUrl = apiConfigInfo.url + newAPIPath;\n              }\n\n              didCancel = false;\n\n              if (body) {\n                options.body = JSON.stringify(body);\n              }\n\n              options.method = method;\n              dispatch({\n                type: \"FETCH_INIT\"\n              });\n              fetchRequest = new Request(APIUrl, options);\n              _context.prev = 7;\n              _context.next = 10;\n              return fetch(fetchRequest);\n\n            case 10:\n              response = _context.sent;\n              status = response.status;\n              _context.next = 14;\n              return response.json();\n\n            case 14:\n              result = _context.sent;\n\n              if (!didCancel) {\n                dispatch({\n                  type: \"FETCH_SUCCESS\",\n                  payload: {\n                    result: result,\n                    status: status\n                  }\n                });\n              }\n\n              _context.next = 21;\n              break;\n\n            case 18:\n              _context.prev = 18;\n              _context.t0 = _context[\"catch\"](7);\n\n              if (!didCancel) {\n                dispatch({\n                  type: \"FETCH_FAILURE\",\n                  payload: _context.t0\n                });\n              }\n\n            case 21:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[7, 18]]);\n    }));\n\n    return function (_x, _x2, _x3) {\n      return _ref.apply(this, arguments);\n    };\n  }(), [url, state.request]);\n  return [state, callApi];\n};\n\nexport default useApi;","map":{"version":3,"sources":["C:/Users/PIONEER/Documents/projects/srabonti-sample-react-java/srabonti-sample-ui/src/hooks/useApi.js"],"names":["useState","useReducer","useCallback","useCookies","apiConfigInfo","isNullOrUndefined","replaceNull","deleteKeysFromObject","PortalConstants","require","SUCCESS_CODE","dataFetchReducer","state","action","type","isLoading","isError","data","payload","result","responseData","status","error","hasError","success","responseStatus","errorMessage","key","message","getDataApiOptions","method","requestBody","authorization","options","headers","body","JSON","stringify","useApi","apiPath","cookie","AUTH_TOKEN","url","request","dispatch","callApi","newAPIPath","APIUrl","didCancel","fetchRequest","Request","fetch","response","json"],"mappings":"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","sourcesContent":["import { useState, useReducer, useCallback } from \"react\";\nimport { useCookies } from 'react-cookie';\nimport apiConfigInfo from '../api/apiConfig';\nimport { isNullOrUndefined } from \"util\";\nimport { replaceNull, deleteKeysFromObject } from '../utility/generalFunctions';\nimport * as PortalConstants from \"../utility/constants\";\nrequire('isomorphic-fetch');\n\nconst SUCCESS_CODE = 200;\n// const UNAUTHORIZED = 400;\n// const SERVER_FAILURE = 500;\n\nconst dataFetchReducer = (state, action) => {\n  switch (action.type) {\n    case \"FETCH_INIT\":\n      return { ...state, isLoading: true, isError: false };\n    case \"FETCH_SUCCESS\":\n      let data = [];\n      if (!isNullOrUndefined(action.payload.result.responseData)) {\n        data = action.payload.result.responseData;\n      }\n      let result =\n        action.payload.status === SUCCESS_CODE ? {\n          ...state,\n          data: data,\n          error: null,\n          hasError: false,\n          isLoading: false,\n          success: true\n        }\n\n          : {\n            ...state,\n            data: null,\n            error: action.payload.result.responseStatus ? action.payload.result.responseStatus : {\n              errorMessage: [{\n                key: \"generic.error\",\n                message: \"Server is down\"\n              }],\n              \"httpStatusCode\": 500,\n              \"statusDesc\": \"ServerFailure\"\n            },\n            hasError: true,\n\n            isLoading: false\n          };\n      return result;\n    case \"FETCH_FAILURE\":\n      return {\n        ...state,\n        data: null,\n        error: action.payload.responseStatus ? action.payload.responseStatus : {\n          errorMessage: [{\n            key: \"generic.error\",\n            message: \"Server is down\"\n          }],\n          \"httpStatusCode\": 500,\n          \"statusDesc\": \"ServerFailure\"\n        },\n        hasError: true,\n        isLoading: false\n      }\n    default:\n      return null;\n\n  }\n};\n\nfunction getDataApiOptions(method, requestBody, authorization) {\n  let options = {\n    method: method,\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json',\n      'Authorization': 'Bearer ' + authorization\n    }\n  }\n  if (!isNullOrUndefined(requestBody)) {\n    options.body = JSON.stringify(requestBody);\n  }\n  return options;\n}\n\nconst useApi = (apiPath, body, method) => {\n\n  const [cookie] = useCookies();\n  let options = getDataApiOptions(method, body, cookie[PortalConstants.AUTH_TOKEN]);\n\n  const [url] = useState(apiConfigInfo.url + apiPath);\n\n\n  const [state, dispatch] = useReducer(dataFetchReducer, {\n    isLoading: null,\n    hasError: false,\n    errorMessage: \"\",\n    data: null,\n    request: body\n  });\n\n  const callApi = useCallback(async (body, method, newAPIPath) => {\n    let APIUrl = url;\n    if (newAPIPath) {\n      APIUrl = apiConfigInfo.url + newAPIPath;\n    }\n\n    let didCancel = false;\n    if (body) {\n      options.body = JSON.stringify(body);\n    }\n    options.method = method;\n    dispatch({ type: \"FETCH_INIT\" });\n    const fetchRequest = new Request(APIUrl, options);\n    try {\n      let response = await fetch(fetchRequest);\n      let status = response.status;\n      let result = await response.json();\n\n      if (!didCancel) {\n        dispatch({ type: \"FETCH_SUCCESS\", payload: { result, status } });\n      }\n    } catch (error) {\n      if (!didCancel) {\n        dispatch({ type: \"FETCH_FAILURE\", payload: error });\n      }\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [url, state.request]);\n\n  return [state, callApi];\n};\n\nexport default useApi;"]},"metadata":{},"sourceType":"module"}